income_by_zip <- merge(income_by_zip, dem_data[summaryCols], by.x = "zipcode", by.y="ZIP")
income_by_zip
summaryCols <-  colnames(dem_data)[grep("SUMMARY.INDICATORS", colnames(dem_data))]
#summaryCols <- c("ZIP", summaryCols)
income_by_zip <- merge(income_by_zip, dem_data[summaryCols], by.x = "zipcode", by.y="ZIP")
dem_data
colnames(dem_data)
summaryCols <-  colnames(dem_data)[grep("SUMMARY.INDICATORS", colnames(dem_data))]
#summaryCols <- c("ZIP", summaryCols)
income_by_zip <- merge(income_by_zip, dem_data[c("ZIP", summaryCols)], by.x = "zipcode",  by.y="ZIP")
#pairs(income_by_zip[,c(2, 4:10)])
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip, aes(x=col, y=mean_income))+geom_point())
})
grid.arrange(grobs=plots)
head(income_by_zip, n=20)
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes(x=col, y=mean_income)))
})
grid.arrange(grobs=plots)
typeof(income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Median.age..years.)
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes(x=col, y=mean_income), stat = "identity))
})
grid.arrange(grobs=plots)
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes(x=col, y=mean_income), stat = "identity)))
})
grid.arrange(grobs=plots)
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes(x=col, y=mean_income), stat = "identity"))
})
grid.arrange(grobs=plots)
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes(col, mean_income), stat = "identity"))
})
grid.arrange(grobs=plots)
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes( mean_income, col), stat = "identity"))
})
grid.arrange(grobs=plots)
ggplot(income_by_zip)+geom_point(aes(summaryCols[1], mean_income), stat = "identity")
summaryCols
ggplot(income_by_zip)+geom_point(aes(Total..Estimate..SUMMARY.INDICATORS...Median.age..years., mean_income), stat = "identity")
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income""), stat = "identity"))
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots)
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots, widths=c(.7, .3))
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots, ncol=1)
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots, ncol=1, heights = 1)
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots, ncol=1,nrow=length(plots) heights = 1)
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots, ncol=1,nrow=length(plots), heights = 1)
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots, ncol=1, nrow=length(plots), heights = rep(1, length(plots)))
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots, ncol=1, nrow=length(plots), heights = rep(5, length(plots)))
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots, ncol=1, nrow=length(plots), heights = rep(20, length(plots)))
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots, ncol=1)
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots)
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots,  nrow=length(plots), heights = rep(20, length(plots)))
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots,  nrow=length(plots), heights = rep(100, length(plots)))
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots,  nrow=length(plots), heights = 1:length(plots)))
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots,  nrow=length(plots), heights = 1:length(plots))
#+ fig.height=5, fig.width=10
ggplot(income_by_zip)+geom_point(aes(Total..Estimate..SUMMARY.INDICATORS...Median.age..years., mean_income), stat = "identity")
#+ fig.height=5, fig.width=10
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots,  nrow=length(plots), heights = 1:length(plots))
#+ fig.height=5, fig.width=10
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots,  nrow=length(plots))
#+ fig.height=10, fig.width=10
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots,  nrow=length(plots))
#+ fig.height=20, fig.width=10
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots,  nrow=length(plots))
#+ fig.height=20, fig.width=10
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots,  nrow=length(plots))
?geom_point
#first need to remove outliers as they are skewing the plots below, doing this manually after observing the plots
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Sex.ratio..males.per.100.females. < 500,]
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Age.dependency.ratio < 250,]
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Old.age.dependency.ratio < 250,]
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Child.dependency.ratio < 150,]
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots,  nrow=length(plots))
income_by_zip <- data %>% group_by(zipcode) %>% summarize(mean_income = sum(amount_agi) / sum(num_returns), state = STATE[1])
income_by_zip[order(income_by_zip$mean_income, decreasing = TRUE)[1:20],]
#first need to remove outliers as they are skewing the plots below, doing this manually after observing the plots
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Sex.ratio..males.per.100.females. < 300,]
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Age.dependency.ratio < 250,]
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Old.age.dependency.ratio < 250,]
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Child.dependency.ratio < 150,]
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots,  nrow=length(plots))
summaryCols <-  colnames(dem_data)[grep("SUMMARY.INDICATORS", colnames(dem_data))]
#summaryCols <- c("ZIP", summaryCols)
income_by_zip <- merge(income_by_zip, dem_data[c("ZIP", summaryCols)], by.x = "zipcode",  by.y="ZIP")
#pairs(income_by_zip[,c(2, 4:10)])
#first need to remove outliers as they are skewing the plots below, doing this manually after observing the plots
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Sex.ratio..males.per.100.females. < 300,]
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Age.dependency.ratio < 250,]
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Old.age.dependency.ratio < 250,]
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Child.dependency.ratio < 150,]
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots,  nrow=length(plots))
income_by_zip <- data %>% group_by(zipcode) %>% summarize(mean_income = sum(amount_agi) / sum(num_returns), state = STATE[1])
income_by_zip[order(income_by_zip$mean_income, decreasing = TRUE)[1:20],]
summaryCols <-  colnames(dem_data)[grep("SUMMARY.INDICATORS", colnames(dem_data))]
#summaryCols <- c("ZIP", summaryCols)
income_by_zip <- merge(income_by_zip, dem_data[c("ZIP", summaryCols)], by.x = "zipcode",  by.y="ZIP")
#pairs(income_by_zip[,c(2, 4:10)])
#first need to remove outliers as they are skewing the plots below, doing this manually after observing the plots
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Sex.ratio..males.per.100.females. < 300,]
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Age.dependency.ratio < 250,]
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Old.age.dependency.ratio < 250,]
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Child.dependency.ratio < 150,]
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots,  nrow=length(plots))
#+ fig.height=5, fig.width=10
income_by_zip$age_diff <- income_by_zip$Male..Estimate..SUMMARY.INDICATORS...Median.age..years. - income_by_zip$Female..Estimate..SUMMARY.INDICATORS...Median.age..years.
ggplot(income_by_zip)+geom_point(aes(age_diff, mean_income), stat = "identity"))
#+ fig.height=5, fig.width=10
income_by_zip$age_diff <- income_by_zip$Male..Estimate..SUMMARY.INDICATORS...Median.age..years. - income_by_zip$Female..Estimate..SUMMARY.INDICATORS...Median.age..years.
ggplot(income_by_zip)+geom_point(aes(age_diff, mean_income))
#+ fig.height=5, fig.width=10
income_by_zip$age_diff <- income_by_zip$Male..Estimate..SUMMARY.INDICATORS...Median.age..years. - income_by_zip$Female..Estimate..SUMMARY.INDICATORS...Median.age..years.
ggplot(income_by_zip)+geom_point(aes(age_diff, mean_income)) + ggtitle("Median age difference between sexes versus mean income")
#+ fig.height=5, fig.width=10
income_by_zip$age_diff <- income_by_zip$Male..Estimate..SUMMARY.INDICATORS...Median.age..years. - income_by_zip$Female..Estimate..SUMMARY.INDICATORS...Median.age..years.
ggplot(income_by_zip)+geom_point(aes(age_diff, mean_income)) + ggtitle("Median age difference between sexes versus mean income")
?str_pad
library(choroplethr)
library(ggplot2)
library(tidyverse)
library(stringr)
# read data, for column classes to keep zip code as a string
data <- read.csv("irs_public_data.csv")
#force zip code to a 5 character string
data$zipcode <- str_pad(as.character(data$zipcode), 5, pad="0")
#zip code mapping was removed from choroplethr package
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')
library(choroplethrZip)
by_zip_num_returns <- data %>% group_by(zipcode) %>% summarize(value = sum(num_returns))
#remove whole-state entries
by_zip_num_returns <- data.frame(by_zip_num_returns[by_zip_num_returns$zipcode != "00000",])
#choropleth zip needs exact column names
colnames(by_zip_num_returns) <- c("region", "value")
zip_choropleth(by_zip_num_returns)
by_state_low_income <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value =num_returns[1]/sum(num_returns))
colnames(by_state_low_income) <- c("region", "value")
# map abbrev to name
by_state_low_income$region <-state_name[by_state_low_income$region]
state_choropleth(by_state_low_income) + ggtitle("Percentage of returns in lowest income bracket")
by_state_low_income <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value =num_returns[1]/sum(num_returns))
colnames(by_state_low_income) <- c("region", "value")
# map abbrev to name
by_state_low_income$region <-state_name[by_state_low_income$region]
state_choropleth(by_state_low_income) + ggtitle("Percentage of returns in lowest income bracket")
by_state_num_returns <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value = sum(num_returns))
colnames(by_state_num_returns) <- c("region", "value")
#change from tbl_df to data frame for state_choropleth
by_state_num_returns <- data.frame(by_state_num_returns)
#force col names
colnames(by_state_num_returns) <- c("region", "value")
# map abbrev to name
by_state_num_returns$region <-state_name[by_state_num_returns$region]
#build map
state_choropleth(by_state_num_returns) + ggtitle("Number of returns by state")
by_state_low_income <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value =num_returns[1]/sum(num_returns))
colnames(by_state_low_income) <- c("region", "value")
# map abbrev to name
by_state_low_income$region <-state_name[by_state_low_income$region]
state_choropleth(by_state_low_income) + ggtitle("Percentage of returns in lowest income bracket")
library(choroplethr)
library(ggplot2)
library(tidyverse)
library(stringr)
# read data, for column classes to keep zip code as a string
data <- read.csv("irs_public_data.csv")
#force zip code to a 5 character string, it gets loaded as an int by default and some zips lose their leading 0
data$zipcode <- str_pad(as.character(data$zipcode), 5, pad="0")
# get the names and abbreviations from the state object
state_name <- tolower(state.name)
state_abb <- state.abb
# DC is included in the data, so add a mapping for that so it doesnt show NA, even though
# its too small to show on the map
state_name <- c(state_name[1:7], "district of columbia", state_name[8:length(state_name)])
state_abb <- c(state_abb[1:7], "DC", state_abb[8:length(state_abb)])
# create mapping
names(state_name) <- state_abb
state_name
by_state_num_returns <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value = sum(num_returns))
colnames(by_state_num_returns) <- c("region", "value")
#change from tbl_df to data frame for state_choropleth
by_state_num_returns <- data.frame(by_state_num_returns)
#force col names
colnames(by_state_num_returns) <- c("region", "value")
# map abbrev to name
by_state_num_returns$region <-state_name[by_state_num_returns$region]
#build map
state_choropleth(by_state_num_returns) + ggtitle("Number of returns by state")
by_state_low_income <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value =num_returns[1]/sum(num_returns))
colnames(by_state_low_income) <- c("region", "value")
# map abbrev to name
by_state_low_income$region <-state_name[by_state_low_income$region]
state_choropleth(by_state_low_income) + ggtitle("Percentage of returns in lowest income bracket")
by_state_low_income <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value =num_returns[6]/sum(num_returns))
colnames(by_state_low_income) <- c("region", "value")
# map abbrev to name
by_state_low_income$region <-state_name[by_state_low_income$region]
state_choropleth(by_state_low_income) + ggtitle("Percentage of returns in highest income bracket")
by_state_low_income <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value =num_returns[1]/sum(num_returns))
colnames(by_state_low_income) <- c("region", "value")
# map abbrev to name
by_state_low_income$region <-state_name[by_state_low_income$region]
state_choropleth(by_state_low_income)
# merge in selected demographic data into data by zip code
# by_zip_num_returns is the sum of number of returns by zip cide
dem_data <- read.csv("acs_population_demographics.csv")
dem_data$ZIP <- as.character(dem_data$ZIP)
dem_data$ZIP <- str_pad(dem_data$ZIP, 5, pad="0")
by_zip_num_returns <- data %>% group_by(zipcode) %>% summarize(persons_accounted = sum(num_returns) +sum(num_dependents), state=STATE[1])
# remove no zip
by_zip_num_returns <- by_zip_num_returns[by_zip_num_returns$zipcode != "00000",]
#merge with demographic data
by_zip_num_returns <- merge(by_zip_num_returns, dem_data[,c("ZIP", "Total..Estimate..Total.population")], by.x="zipcode", by.y = "ZIP")
by_zip_num_returns$pct_accounted <- by_zip_num_returns$persons_accounted / by_zip_num_returns$Total..Estimate..Total.population
tail(by_zip_num_returns[order(by_zip_num_returns$pct_accounted),], n=10)
head(by_zip_num_returns[order(by_zip_num_returns$pct_accounted),], n=10)
ggplot(by_zip_num_returns[by_zip_num_returns$pct_accounted <= 1,], aes(x=pct_accounted)) + geom_density()+ ggtitle("Percentage of estimated population accounted for in the tax returns")
income_by_zip <- data %>% group_by(zipcode) %>% summarize(mean_income = sum(amount_agi) / sum(num_returns), state = STATE[1])
income_by_zip[order(income_by_zip$mean_income, decreasing = TRUE)[1:20],]
income_by_state <-  data %>% group_by(STATE) %>% summarize(value = sum(amount_agi) / sum(num_returns))
income_by_state$STATE <- state_name[income_by_state$STATE]
colnames(income_by_state) <- c("region", "value")
state_choropleth(income_by_state) + ggtitle("Mean Income By State")
income_by_state <-  data %>% group_by(STATE) %>% summarize(value = sum(amount_agi) / sum(num_returns))
income_by_state$STATE <- state_name[income_by_state$STATE]
colnames(income_by_state) <- c("region", "value")
state_choropleth(income_by_state) + ggtitle("Mean Income By State")
summaryCols <-  colnames(dem_data)[grep("SUMMARY.INDICATORS", colnames(dem_data))]
#summaryCols <- c("ZIP", summaryCols)
income_by_zip <- merge(income_by_zip, dem_data[c("ZIP", summaryCols)], by.x = "zipcode",  by.y="ZIP")
#pairs(income_by_zip[,c(2, 4:10)])
#first need to remove outliers as they are skewing the plots below, doing this manually after observing the plots
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Sex.ratio..males.per.100.females. < 300,]
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Age.dependency.ratio < 250,]
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Old.age.dependency.ratio < 250,]
income_by_zip <- income_by_zip[income_by_zip$Total..Estimate..SUMMARY.INDICATORS...Child.dependency.ratio < 150,]
plots <- lapply(summaryCols, function(col){
return(ggplot(income_by_zip)+geom_point(aes_string(col, "mean_income"), stat = "identity"))
})
grid.arrange(grobs=plots,  nrow=length(plots))
library(choroplethr)
library(ggplot2)
library(tidyverse)
library(stringr)
# read data, for column classes to keep zip code as a string
data <- read.csv("irs_public_data.csv", colClasses=c("character", "character",rep("numeric",11)))
#force zip code to a 5 character string, it gets loaded as an int by default and some zips lose their leading 0
data$zipcode <- str_pad(as.character(data$zipcode), 5, pad="0")
by_state_num_returns <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value = sum(num_returns))
colnames(by_state_num_returns) <- c("region", "value")
#change from tbl_df to data frame for state_choropleth
by_state_num_returns <- data.frame(by_state_num_returns)
#force col names
colnames(by_state_num_returns) <- c("region", "value")
# map abbrev to name
by_state_num_returns$region <-state_name[by_state_num_returns$region]
#build map
state_choropleth(by_state_num_returns) + ggtitle("Number of returns by state")
by_state_low_income <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value =num_returns[1]/sum(num_returns))
colnames(by_state_low_income) <- c("region", "value")
# map abbrev to name
by_state_low_income$region <-state_name[by_state_low_income$region]
state_choropleth(by_state_low_income) + ggtitle("Percentage of returns in lowest income bracket")
by_state_low_income <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value =num_returns[6]/sum(num_returns))
colnames(by_state_low_income) <- c("region", "value")
# map abbrev to name
by_state_low_income$region <-state_name[by_state_low_income$region]
state_choropleth(by_state_low_income) + ggtitle("Percentage of returns in highest income bracket")
by_state_low_income <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value =num_returns[1]/sum(num_returns))
colnames(by_state_low_income) <- c("region", "value")
# map abbrev to name
by_state_low_income$region <-state_name[by_state_low_income$region]
state_choropleth(by_state_low_income)
by_state_low_income <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value =num_returns[6]/sum(num_returns))
colnames(by_state_low_income) <- c("region", "value")
# map abbrev to name
by_state_low_income$region <-state_name[by_state_low_income$region]
state_choropleth(by_state_low_income) + ggtitle("Percentage of returns in highest income bracket")
by_state_low_income <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value =num_returns[1]/sum(num_returns))
colnames(by_state_low_income) <- c("region", "value")
# map abbrev to name
by_state_low_income$region <-state_name[by_state_low_income$region]
state_choropleth(by_state_low_income)
# merge in selected demographic data into data by zip code
# by_zip_num_returns is the sum of number of returns by zip cide
dem_data <- read.csv("acs_population_demographics.csv")
dem_data$ZIP <- as.character(dem_data$ZIP)
dem_data$ZIP <- str_pad(dem_data$ZIP, 5, pad="0")
by_zip_num_returns <- data %>% group_by(zipcode) %>% summarize(persons_accounted = sum(num_returns) +sum(num_dependents), state=STATE[1])
# remove no zip
by_zip_num_returns <- by_zip_num_returns[by_zip_num_returns$zipcode != "00000",]
#merge with demographic data
by_zip_num_returns <- merge(by_zip_num_returns, dem_data[,c("ZIP", "Total..Estimate..Total.population")], by.x="zipcode", by.y = "ZIP")
by_zip_num_returns$pct_accounted <- by_zip_num_returns$persons_accounted / by_zip_num_returns$Total..Estimate..Total.population
tail(by_zip_num_returns[order(by_zip_num_returns$pct_accounted),], n=10)
head(by_zip_num_returns[order(by_zip_num_returns$pct_accounted),], n=10)
ggplot(by_zip_num_returns[by_zip_num_returns$pct_accounted <= 1,], aes(x=pct_accounted)) + geom_density()+ ggtitle("Percentage of estimated population accounted for in the tax returns")
income_by_zip <- data %>% group_by(zipcode) %>% summarize(mean_income = sum(amount_agi) / sum(num_returns), state = STATE[1])
income_by_zip[order(income_by_zip$mean_income, decreasing = TRUE)[1:20],]
income_by_zip <- data %>% group_by(zipcode) %>% summarize(mean_income = sum(amount_agi) / sum(num_returns), state = STATE[1])
income_by_zip[order(income_by_zip$mean_income, decreasing = TRUE)[1:50],]
income_by_state <-  data %>% group_by(STATE) %>% summarize(value = sum(amount_agi) / sum(num_returns))
income_by_state$STATE <- state_name[income_by_state$STATE]
colnames(income_by_state) <- c("region", "value")
state_choropleth(income_by_state) + ggtitle("Mean Income By State")
by_state_paid_preparer <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value =sum(num_paid_preparer_returns) / sum(num_returns))
colnames(by_state_paid_preparer) <- c("region", "value")
# map abbrev to name
by_state_paid_preparer$region <-state_name[by_state_paid_preparer$region]
state_choropleth(by_state_paid_preparer)
by_state_paid_preparer <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value =sum(num_paid_preparer_returns) / sum(num_returns))
colnames(by_state_paid_preparer) <- c("region", "value")
# map abbrev to name
by_state_paid_preparer$region <-state_name[by_state_paid_preparer$region]
state_choropleth(by_state_paid_preparer) + ggtitle("Percentage of returns with paid preparers")
by_zip_num_dependents <- data[data$zipcode != "00000",] %>% group_by(STATE) %>% summarize(value =sum(num_dependents))
by_zip_num_dependents <- merge(by_zip_num_dependents, dem_data[,c("ZIP", "Total..Estimate..Total.population")], by.x="zipcode", by.y = "ZIP")
by_zip_num_dependents <- data[data$zipcode != "00000",] %>% group_by(STATE) %>% summarize(value =sum(num_dependents))
by_zip_num_dependents <- merge(by_zip_num_dependents, dem_data[,c("ZIP", "Total..Estimate..Total.population")], by.x="zipcode", by.y = "ZIP")
by_zip_num_dependents
by_zip_num_dependents <- data[data$zipcode != "00000",] %>% group_by(zipcode) %>% summarize(dependents=sum(num_dependents))
by_zip_num_dependents <- merge(by_zip_num_dependents, dem_data[,c("ZIP", "Total..Estimate..Total.population")], by.x="zipcode", by.y = "ZIP")
by_zip_num_dependents
by_zip_num_dependents <- data[data$zipcode != "00000",] %>% group_by(zipcode) %>% summarize(dependents=sum(num_dependents), state=STATE[1])
by_zip_num_dependents <- merge(by_zip_num_dependents, dem_data[,c("ZIP", "Total..Estimate..Total.population")], by.x="zipcode", by.y = "ZIP")
by_zip_num_dependents
by_zip_num_dependents %>% group_by(state) %>% summarise(value = sum(num_dependents)/ sum(Total..Estimate..Total.population))
by_zip_num_dependents %>% group_by(state) %>% summarise(value = sum(dependents)/ sum(Total..Estimate..Total.population))
# get number of dependents by zip code
by_zip_num_dependents <- data[data$zipcode != "00000",] %>% group_by(zipcode) %>% summarize(dependents=sum(num_dependents), state=STATE[1])
# get total pop for each zip code
by_zip_num_dependents <- merge(by_zip_num_dependents, dem_data[,c("ZIP", "Total..Estimate..Total.population")], by.x="zipcode", by.y = "ZIP")
# group by state
by_state_dependents <-  by_zip_num_dependents %>% group_by(state) %>% summarise(value = sum(dependents)/ sum(Total..Estimate..Total.population))
#map names to regions
by_state_dependents$STATE <- state_name[by_state_dependents$STATE]
# get number of dependents by zip code
by_zip_num_dependents <- data[data$zipcode != "00000",] %>% group_by(zipcode) %>% summarize(dependents=sum(num_dependents), state=STATE[1])
# get total pop for each zip code
by_zip_num_dependents <- merge(by_zip_num_dependents, dem_data[,c("ZIP", "Total..Estimate..Total.population")], by.x="zipcode", by.y = "ZIP")
# group by state
by_state_dependents <-  by_zip_num_dependents %>% group_by(state) %>% summarise(value = sum(dependents)/ sum(Total..Estimate..Total.population))
#map names to regions
by_state_dependents$state <- state_name[by_state_dependents$state]
colnames(by_state_dependents) <- c("region", "value")
state_choropleth(by_state_dependents) + ggtitle("Percentage of dependents by state")
# get number of dependents by zip code
by_zip_num_dependents <- data[data$zipcode != "00000",] %>% group_by(zipcode) %>% summarize(dependents=sum(num_dependents), state=STATE[1])
# get total pop for each zip code
by_zip_num_dependents <- merge(by_zip_num_dependents, dem_data[,c("ZIP", "Total..Estimate..Total.population")], by.x="zipcode", by.y = "ZIP")
# group by state
by_state_dependents <-  by_zip_num_dependents %>% group_by(state) %>% summarise(value = sum(dependents)/ sum(Total..Estimate..Total.population))
#map names to regions
by_state_dependents$state <- state_name[by_state_dependents$state]
colnames(by_state_dependents) <- c("region", "value")
state_choropleth(by_state_dependents) + ggtitle("Percentage of dependents in total population by state")
#zip code mapping was removed from choroplethr package
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')
library(choroplethrZip)
# group by zip code and summarize returns
by_zip_num_returns <- data %>% group_by(zipcode) %>% summarize(value = sum(num_returns))
#remove whole-state entries
by_zip_num_returns <- data.frame(by_zip_num_returns[by_zip_num_returns$zipcode != "00000",])
#choropleth zip needs exact column names
colnames(by_zip_num_returns) <- c("region", "value")
#commenting out the mapping line in case someone wants to run through code, this really takes a while
zip_choropleth(by_zip_num_returns)
# "00000" entries are for the whole state
by_state_num_returns <- data[data$zipcode == "00000",] %>% group_by(STATE) %>% summarize(value = sum(num_returns))
colnames(by_state_num_returns) <- c("region", "value")
#force col names
colnames(by_state_num_returns) <- c("region", "value")
# map abbrev to name
by_state_num_returns$region <-state_name[by_state_num_returns$region]
#build map
state_choropleth(by_state_num_returns) + ggtitle("Number of returns by state")
library(knitr)
library(choroplethr)
library(ggplot2)
library(tidyverse)
library(stringr)
# read data, force column classes
data <- read.csv("irs_public_data.csv", colClasses=c("character", "character",rep("numeric",11)))
#force zip code to a 5 character string, it gets loaded as an int by default and some zips lose their leading 0
data$zipcode <- str_pad(as.character(data$zipcode), 5, pad="0")
?grid.arrange
library(knitr)
library(choroplethr)
library(ggplot2)
library(tidyverse)
library(stringr)
# read data, force column classes
data <- read.csv("irs_public_data.csv", colClasses=c("character", "character",rep("numeric",11)))
#force zip code to a 5 character string, it gets loaded as an int by default and some zips lose their leading 0
data$zipcode <- str_pad(as.character(data$zipcode), 5, pad="0")
library(knitr)
library(choroplethr)
library(ggplot2)
library(tidyverse)
library(stringr)
# read data, force column classes
data <- read.csv("irs_public_data.csv", colClasses=c("character", "character",rep("numeric",11)))
#force zip code to a 5 character string, it gets loaded as an int by default and some zips lose their leading 0
data$zipcode <- str_pad(as.character(data$zipcode), 5, pad="0")
#zip code mapping was removed from choroplethr package
library(devtools)
install_github('arilamstein/choroplethrZip@v1.5.0')
library(choroplethrZip)
# group by zip code and summarize returns
by_zip_num_returns <- data %>% group_by(zipcode) %>% summarize(value = sum(num_returns))
#remove whole-state entries
by_zip_num_returns <- data.frame(by_zip_num_returns[by_zip_num_returns$zipcode != "00000",])
#choropleth zip needs exact column names
colnames(by_zip_num_returns) <- c("region", "value")
#commenting out the mapping line in case someone wants to run through code, this really takes a while
zip_choropleth(by_zip_num_returns)
setwd("~/Documents/columbia/eda/proj/www")
library(shiny)
library(shinyLikert)
?renderShinyLikert
runApp()
runApp()
runApp()
?spread
runApp()
?%>%
runApp()
detach("package:tidyr", unload=TRUE)
detach("package:dplyr", unload=TRUE)
runApp()
conflicts()
detach("package:tidyr", unload=TRUE)
runApp()
